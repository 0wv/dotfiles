#!/usr/bin/env bash

set -eu

PROG_NAME=installer
CONFIG=installer.config.json
DOTFILES_DIR="$HOME/.dotfiles"
DOTFILES_REPO=https://github.com/sakkke/dotfiles.git
all=false
dirs=()
dry=
force=false
mode=ln
profile=archlinux

function main {
  cd "$(dirname "$(realpath "$0")")"

  while getopts ad:fhm:np: opt; do
    case "$opt" in
      a )
        all=true
        ;;

      d )
        dirs+=("$OPTARG")
        ;;

      f )
        force=true
        ;;

      h )
        get_help
        exit 0
        ;;

      m )
        mode="$OPTARG"
        ;;

      n )
        dry='echo -e \e[1;36mDry:\e[m'
        ;;

      p )
        profile="$OPTARG"
        ;;
    esac
  done

  case "$mode" in
    deps )
      jq -r ".config.$profile.preinstall[]" "$DOTFILES_DIR/$CONFIG" | bash
      eval '$(jq -r ".config.$profile.install" "$DOTFILES_DIR/$CONFIG") < $DOTFILES_DIR/$profile.dependencies'
      return
      ;;

    init )
      if [[ ! -d $DOTFILES_DIR ]]; then
        git clone \
          --depth 1 \
          --single-branch \
          -b main \
          "$DOTFILES_REPO" \
          "$DOTFILES_DIR"
      fi

      git -C "$DOTFILES_DIR" ls-files -s | grep '^160000 ' | while read -r _ commit _ submodule; do
        profile_dir="${submodule%%/*}"
        profile_name="${profile_dir#*.}"

        if [[ $profile_name = $profile ]]; then
          if ! command -v jq &> /dev/null; then
            warn 'jq command not found, so use the shallow clone as the fallback'
            git -C "$DOTFILES_DIR" submodule update \
              --depth 1 \
              --init \
              --recommend-shallow \
              --recursive \
              "$submodule"
            continue
          fi

          remote_origin_url="$(
            git config -f "$DOTFILES_DIR/.gitmodules" --get-regexp url | while read -r key value; do
              if [[ $key = "submodule.$submodule.url" ]]; then
                printf %s "$value"
              fi
            done
          )"
          git clone \
            --filter blob:none \
            --no-checkout \
            --sparse \
            "$remote_origin_url" \
            "$DOTFILES_DIR/$submodule"
          git -C "$DOTFILES_DIR/$submodule" sparse-checkout init --cone
          jq -r ".\"sparse-checkout\".\"$submodule\"[]" "$DOTFILES_DIR/$CONFIG" | xargs -L1 git -C "$DOTFILES_DIR/$submodule" sparse-checkout add
          git -C "$DOTFILES_DIR/$submodule" switch -d "$commit"
        fi
      done

      "$DOTFILES_DIR/installer" -am deps -p "$profile"
      "$DOTFILES_DIR/installer" -afp "$profile"
      return
      ;;

    update )
      git pull
      jq -r ".config.$profile.update[]" "$CONFIG" | bash
      return
      ;;
  esac

  if [[ $all = false ]]; then
    if [[ ${#dirs[@]} -lt 1 ]]; then
      error 'there is nothing to do'
      get_help
      return 3
    fi

    for ((i = 0; i < ${#dirs[@]}; i++)); do
      dir="${dirs[i]}"

      if [[ -d $dir ]]; then
        continue
      elif [[ -d $dir.$profile ]]; then
        dirs[i]="$dir.$profile"
        continue
      fi

      error 'not found:' "$dir"
      return 4
    done
  fi

  if [[ $all = false ]]; then
    for dir in "${dirs[@]}"; do
      git ls-files -z "$(realpath "$dir")"
    done
  else
    find -maxdepth 1 -mindepth 1 \( -type d -o -type l \) -print0 | while IFS= read -rd $'\0' dir; do
      if grep -q ".$profile$" <<< "$dir"; then
        printf '%s\0' "$(realpath "$dir")"
      fi
    done | xargs -0 git ls-files -z
  fi | while IFS= read -rd $'\0' file; do
    if grep -q '/.gitkeep$' <<< "$file"; then
      dir="$(dirname "$file")"
      relative_path="${dir#*/}"
      target_dir="$HOME/$relative_path"

      if [[ ! -d $target_dir ]]; then
        $dry mkdir -pv "$target_dir"
      fi

      continue
    fi

    relative_path="${file#*/}"
    out_file="$HOME/$relative_path"
    parent_dir="$(dirname "$out_file")"
    src_file="$PWD/$file"

    case "$mode" in
      ln )
        if [[ ! -d $parent_dir ]]; then
          $dry mkdir -pv "$parent_dir"
        fi

        if [[ $force = true ]]; then
          $dry ln -fsv "$src_file" "$out_file"
          continue
        fi

        if [[ -z $dry ]] && [[ "$(realpath "$out_file")" = "$(realpath "$src_file")" ]]; then
          info 'already linked... skipping:' "$src_file"
          continue
        elif [[ -e $out_file ]]; then
          warn 'skipping to avoid overwriting:' "$src_file"
          continue
        fi

        $dry ln -sv "$src_file" "$out_file"
        ;;

      rm )
        if [[ "$(realpath "$out_file")" != "$(realpath "$src_file")" ]]; then
          info 'not linked... skipping:' "$src_file"
          continue
        fi

        $dry rm -v "$out_file"
        $dry recursive_rmdir "$(dirname "$out_file")"
        ;;

      * )
        error 'invalid mode:' "$mode"
        return 5
        ;;
    esac
  done
}

function recursive_rmdir {
  local dir="$1"

  if [[ -d "$dir" ]]; then
    function rmdir_wrapper {
      dir="$1"

      if [[ ! -d "$dir" ]]; then
        error 'not a directory:' "$dir"
        return 3
      fi

      rmdir "$dir" &> /dev/null && info 'removed:' "$dir"
    }

    rmdir_wrapper "$dir" 2> /dev/null || return 0
    recursive_rmdir "$(dirname "$dir")"
  else
    error 'not a directory:' "$dir"
    return 3
  fi
}

function error {
  printf '\e[1;31mError:\e[m %s\n' "$*"
}

function get_help {
  cat << /cat

Usage:
  $PROG_NAME [options]

Options:
  -a                           mark all dirs
  -d <dir>                     mark the dir
  -f                           remove existing destination files
  -m <deps|init|ln|rm|update>  set the mode [default: ln]
  -n                           perform a trial run with no changes made
  -p <profile>                 set the profile name [default: archlinux]

  -h                           display this help
/cat
}

function info {
  printf '\e[1;32mInfo:\e[m %s\n' "$*"
}

function warn {
  printf '\e[1;33mWarn:\e[m %s\n' "$*"
}

main "$@"
